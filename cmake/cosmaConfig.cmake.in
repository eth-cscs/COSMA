if(NOT TARGET cosma::cosma)
    cmake_policy(PUSH) # Save project's policies
    if(POLICY CMP0074)
        cmake_policy(SET CMP0074 NEW)
    endif()
    include(CMakeFindDependencyMacro)

    # Bundled modules should be found first to prevent conflicts with similarly 
    # named modules in calling projects. 
    #
    set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR} ${CMAKE_MODULE_PATH})

    set(MKL_ROOT "@MKL_ROOT@")
    set(MPI_CXX_COMPILER "@MPI_CXX_COMPILER@")

    find_package(MPI)

    set(COSMA_BLAS "@COSMA_BLAS@")
    set(COSMA_SCALAPACK "@COSMA_SCALAPACK@")

    if (${COSMA_BLAS} STREQUAL "MKL")
        find_package(MKL)
    elseif (${COSMA_BLAS} STREQUAL "CUDA" OR ${COSMA_BLAS} STREQUAL "ROCM")
        set(TILEMM_GPU_BACKEND ${COSMA_BLAS} CACHE STRING FORCE "")
        find_dependency(Tiled-MM) # bundled
        if ("@COSMA_WITH_NCCL@")
            if (${COSMA_BLAS} STREQUAL "CUDA")
                find_package(CUDAToolkit)
                find_package(NCCL)
            else()
                find_package(hip)
                find_package(RCCL)
            endif()
        endif()
        if ("@COSMA_WITH_GPU_AWARE_MPI@")
            if (${COSMA_BLAS} STREQUAL "CUDA")
                find_package(CUDAToolkit)
            else()
                find_package(hip)
        endif()
    elseif (${COSMA_BLAS} STREQUAL "OPENBLAS")
        find_package(OpenBLAS)
        set_target_properties(openblas PROPERTIES 
            INTERFACE_INCLUDE_DIRECTORIES "${OpenBLAS_INCLUDE_DIRS}"
            IMPORTED_LOCATION "${OpenBLAS_LIBRARIES}")
    elseif (${COSMA_BLAS} STREQUAL "CRAY_LIBSCI")
        find_package(CRAY_LIBSCI REQUIRED)
    elseif (${COSMA_BLAS} STREQUAL "CUSTOM")
        find_package(BLAS)
    endif ()

    if (${COSMA_SCALAPACK} STREQUAL "MKL")
        find_package(MKL)
    elseif (${COSMA_SCALAPACK} STREQUAL "CRAY_LIBSCI")
        find_package(CRAY_LIBSCI REQUIRED)
    elseif (${COSMA_SCALAPACK} STREQUAL "CUSTOM")
        find_package(SCALAPACK)
    endif ()

    if ("@COSMA_WITH_PROFILING@")
        find_dependency(semiprof)
    endif ()

    # Clean-up module path.
    #
    list(REMOVE_ITEM CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

    # These are bundled with cosma
    #
    find_dependency(costa)

    include("${CMAKE_CURRENT_LIST_DIR}/cosmaTargets.cmake")
    cmake_policy(POP) # Restore project's policies
endif()

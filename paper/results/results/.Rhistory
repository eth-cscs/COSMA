data$case = paste(data$case,data$m == data$k,sep ="_")
#data = data[data$case != "memory_p2_FALSE",]
#data = data[data$case != "strong_TRUE",]
data[data$case == "memory_p1_FALSE",]$case = "m<k, lim. memory"
data[data$case == "memory_p1_TRUE",]$case = "m=k, lim. memory"
data[data$case == "memory_p2_TRUE",]$case = "m=k, extra memory"
data[data$case == "strong_FALSE",]$case = "m<k, strong scaling"
data[data$case == "memory_p2_FALSE",]$case = "m<k, extra memory"
data[data$case == "strong_TRUE",]$case = "m=k, strong scaling"
data2[order(-data2$FLOPS)]
data2[order(-data2$FLOPS),]
data$FLOPS
data[order(-data$FLOPS),]
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
dev.off()
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
case
name
print(p)
legend(legend = c('a', 'b','c','d'),
x = 0.7,
y = 0.8,
xpd = TRUE,
# inset = c(0,0),
# bty = "n",
# lty = c(1, 1, 1, 1),
# lwd=2,
y.intersp=2)
dev.off()
legend(legend = c('a', 'b','c','d'),
x = 0.7,
y = 0.8,
xpd = TRUE,
# inset = c(0,0),
# bty = "n",
# lty = c(1, 1, 1, 1),
# lwd=2,
y.intersp=2)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
print(p)
dev.off()
dev.off()
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
dev.off()
dev.off()
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
?legend
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
annotPointY
tscaling$algorithm
dev.off()
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
annotPointY
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
tscaling[tscaling$p == annotPointX[2] & tscaling$algorithm == 'CTF [48] ',]$time
annotPointY
tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time
first(tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time)
tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time[0]
tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time[0]
tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time[1]
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
library(ggplot2)
library(ggrepel)
library(reshape2)
library(plyr)
#library("reshape2")
path = "C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results" #getwd()
#exp_name = "weak48"
exp_filename = "result.csv"
variants = c("memory_p1","memory_p2", "strong")
sizes = c("square","tall")
variantPlots = c("FLOPS")
algorithms = c("CARMA [22]", "ScaLAPACK","CTF","COSMM")
GFLOPSperCore = 1209/36
statistics = 0
annotCoord = list()
#annotCoordX[["square_memory_p1_time"]] =
#exp_filename = paste(exp_name,'.csv',sep="")
#setwd(paste(path,exp_name,sep =""))
source(paste(path, "/SPCL_Stats.R", sep=""))
# prepare the data
rawData <- read.csv(file=exp_filename, sep=",", stringsAsFactors=FALSE, header=TRUE)
for (i1 in 1:length(sizes)) {
size = sizes[i1]
if (size == 'square') {
dataFirst = rawData[rawData$m == rawData$k,]
} else {
dataFirst = rawData[rawData$m < rawData$k,]
}
for (i2 in 1:length(variants)) {
variant = variants[i2]
data = dataFirst[dataFirst$case == variant,]
if (nrow(data) == 0)
next
tscaling <- data[c("p", "algorithm", "time")]
m = data$m
tscaling$time = 200* data$m * data$n * data$k / (data$time * 1e6) / (GFLOPSperCore * data$p)
ylabel = "% peak performance"
yscale = scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))
name = paste(size, variant, sep="_")
print(tscaling[c("algorithm","p","time")])
aspRatio = 0.7
w = 10
textSize = 30
pointSize = 5
if (size == 'square' && variant == 'strong') {
annotx = c(9000,712,1024,256)
annoty = c(50,5,70,20)
annotPointX1 = c(4096,1024,512,128)
annotPointX2 = c(7000,800,700,150)
annotPointY2 = c(47,8,67,23)
limit = ylim(0, 90)
} else if (size == 'square' && variant == 'strong')  {
annotx = c(206,512,2024,1200)
annoty = c(20384,16000,4000,130000)
annotPointX = c(256,512,1024,8192)
limit = ylim(0, 90)
}
else if (size == 'square' && variant == 'strong')  {
annotx = c(206,512,2024,1200)
annoty = c(20384,16000,4000,130000)
annotPointX = c(256,512,1024,8192)
limit = ylim(0, 90)
}
else {
next
}
annotPointY1 = c(tscaling[tscaling$p == annotPointX[1] & tscaling$algorithm == 'CARMA [22] ',]$time[1],
tscaling[tscaling$p == annotPointX[2] & tscaling$algorithm == 'CTF [48] ',]$time[1],
tscaling[tscaling$p == annotPointX[3] & tscaling$algorithm == 'COSMM (this work) ',]$time[1],
tscaling[tscaling$p == annotPointX[4] & tscaling$algorithm == 'ScaLAPACK [52] ',]$time[1])
# plot the timers
pdf(file=paste("size_",size, "_var_", variant , "_", varPlot, ".pdf", sep=""),
width = w, height = w*aspRatio)
limit = yscale
shapes = scale_shape_manual(values=c(15, 16, 17,18))
shapesColors = scale_color_manual(values = c("#F8766D", "#7CAE00","#00BFC4",  "#C77CFF"))
data3 = ddply(tscaling, ~ algorithm+p, summarize, min=min(time), max=max(time), mean=median(time))
p <- ggplot(mapping=aes(x=p, y=mean, ymin=min, ymax=max, fill=algorithm, color=algorithm, shape=algorithm)) +
geom_ribbon(data=data3[data3$algorithm != "CARMA [22] ",], alpha=0.3, show.legend=FALSE)+
shapes +
geom_point(data=data3, size = 4, show.legend=FALSE) +
geom_errorbar(data=data3[data3$algorithm == "CARMA [22] ",], width=0.1, size=1, show.legend=FALSE) +
scale_x_continuous(trans='log2',labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
#scale_x_log2("# of cores", breaks=c(128, 256, 512, 1024, 2048, 4096, 8192, 16384)) +
# scale_y_log10(ylabel) +
xlab("# of cores") +
yscale +
ylab(ylabel) +
theme_bw(27) +
annotate("text", x = annotx, y = annoty, label = annotl, size=textSize/3) +
annotate("segment", x = annotPointX2[1], xend = annotPointX1[1],
y = annotPointY2[1], yend = annotPointY1[1]) +
annotate("segment", x = annotPointX2[2], xend = annotPointX1[2],
y = annotPointY2[2], yend = annotPointY1[2]) +
annotate("segment", x = annotPointX2[3], xend = annotPointX1[3],
y = annotPointY2[3], yend = annotPointY1[3]) +
annotate("segment", x = annotPointX2[4], xend = annotPointX1[4],
y = annotPointY2[4], yend = annotPointY1[4])
print(p)
dev.off()
}
}
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
tscaling
annotl
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
c
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
dev.off()
dev.off()
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
annotPointY1
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
tscaling
debugSource('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
GFLOPSperCore = 1209/36
data$FLOPS =  200* data$m * data$n * data$k / (data$time * 1e6) / (GFLOPSperCore * data$p)
data$case = paste(data$case,data$m == data$k,sep ="_")
#data = data[data$case != "memory_p2_FALSE",]
#data = data[data$case != "strong_TRUE",]
data[data$case == "memory_p1_FALSE",]$case = "m<k, lim. memory"
data[data$case == "memory_p1_TRUE",]$case = "m=k, lim. memory"
data[data$case == "memory_p2_TRUE",]$case = "m=k, extra memory"
data[data$case == "strong_FALSE",]$case = "m<k, strong scaling"
data[data$case == "memory_p2_FALSE",]$case = "m<k, extra memory"
data[data$case == "strong_TRUE",]$case = "m=k, strong scaling"
data = read.table("result.csv", header = T, sep = ',')
GFLOPSperCore = 1209/36
data$FLOPS =  200* data$m * data$n * data$k / (data$time * 1e6) / (GFLOPSperCore * data$p)
data$case = paste(data$case,data$m == data$k,sep ="_")
#data = data[data$case != "memory_p2_FALSE",]
#data = data[data$case != "strong_TRUE",]
data[data$case == "memory_p1_FALSE",]$case = "m<k, lim. memory"
data[data$case == "memory_p1_TRUE",]$case = "m=k, lim. memory"
data[data$case == "memory_p2_TRUE",]$case = "m=k, extra memory"
data[data$case == "strong_FALSE",]$case = "m<k, strong scaling"
data[data$case == "memory_p2_FALSE",]$case = "m<k, extra memory"
data[data$case == "strong_TRUE",]$case = "m=k, strong scaling"
data[order(-data$FLOPS),]
#find min, max, avg speedup
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (our)"==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2$maxSpeedup = data2$minTime / data2$"time.COSMM (our)"
#data2<-data2[!(data2$maxSpeedup>6.4),]
#data2 = data2[data2$m %% 36 == 0,]
meanSpeedups = c(gm_mean(data2[data2$case == "strong_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "strong_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
maxSpeedups = c(max(data2[data2$case == "strong_TRUE",]$maxSpeedup),
max(data2[data2$case == "strong_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
minSpeedups = c(min(data2[data2$case == "strong_TRUE",]$maxSpeedup),
min(data2[data2$case == "strong_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
overalSpeedups = c(min(data2$maxSpeedup), gm_mean(data2$maxSpeedup), max(data2$maxSpeedup))
#find min, max, avg speedup
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (our)"==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2$maxSpeedup = data2$minTime / data2$"time.COSMM (our)"
#data2<-data2[!(data2$maxSpeedup>6.4),]
#data2 = data2[data2$m %% 36 == 0,]
meanSpeedups = c(gm_mean(data2[data2$case == "strong_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "strong_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
maxSpeedups = c(max(data2[data2$case == "strong_TRUE",]$maxSpeedup),
max(data2[data2$case == "strong_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
minSpeedups = c(min(data2[data2$case == "strong_TRUE",]$maxSpeedup),
min(data2[data2$case == "strong_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
overalSpeedups = c(min(data2$maxSpeedup), gm_mean(data2$maxSpeedup), max(data2$maxSpeedup))
overalSpeedups
#find min, max, avg speedup
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (our)"==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2$maxSpeedup = data2$minTime / data2$"time.COSMM (our) "
#data2<-data2[!(data2$maxSpeedup>6.4),]
#data2 = data2[data2$m %% 36 == 0,]
meanSpeedups = c(gm_mean(data2[data2$case == "strong_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "strong_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
maxSpeedups = c(max(data2[data2$case == "strong_TRUE",]$maxSpeedup),
max(data2[data2$case == "strong_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
minSpeedups = c(min(data2[data2$case == "strong_TRUE",]$maxSpeedup),
min(data2[data2$case == "strong_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
overalSpeedups = c(min(data2$maxSpeedup), gm_mean(data2$maxSpeedup), max(data2$maxSpeedup))
overalSpeedups
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (our)"==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2
data
data = read.table("result.csv", header = T, sep = ',')
data$algorithm
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (our) "==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2$maxSpeedup = data2$minTime / data2$"time.COSMM (our) "
#data2<-data2[!(data2$maxSpeedup>6.4),]
#data2 = data2[data2$m %% 36 == 0,]
meanSpeedups = c(gm_mean(data2[data2$case == "strong_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "strong_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
maxSpeedups = c(max(data2[data2$case == "strong_TRUE",]$maxSpeedup),
max(data2[data2$case == "strong_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
minSpeedups = c(min(data2[data2$case == "strong_TRUE",]$maxSpeedup),
min(data2[data2$case == "strong_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
overalSpeedups = c(min(data2$maxSpeedup), gm_mean(data2$maxSpeedup), max(data2$maxSpeedup))
overalSpeedups
#find min, max, avg speedup
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
data = read.table("result.csv", header = T, sep = ',')
data$case = paste(data$case,data$m == data$k,sep ="_")
data2 = reshape(data,timevar="algorithm",idvar=c("m","n","k","p","case"),direction="wide")
data2[is.na(data2)] <- 99999999
data2<-data2[!(data2$"time.COSMM (this work) "==99999999),]
data2$minTime = apply(data2[, 6:8], 1, min)
data2<-data2[!(data2$minTime==99999999),]
data2$maxSpeedup = data2$minTime / data2$"time.COSMM (this work) "
#data2<-data2[!(data2$maxSpeedup>6.4),]
#data2 = data2[data2$m %% 36 == 0,]
meanSpeedups = c(gm_mean(data2[data2$case == "strong_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "strong_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
gm_mean(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
maxSpeedups = c(max(data2[data2$case == "strong_TRUE",]$maxSpeedup),
max(data2[data2$case == "strong_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
max(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
minSpeedups = c(min(data2[data2$case == "strong_TRUE",]$maxSpeedup),
min(data2[data2$case == "strong_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p1_FALSE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_TRUE",]$maxSpeedup),
min(data2[data2$case == "memory_p2_FALSE",]$maxSpeedup))
overalSpeedups = c(min(data2$maxSpeedup), gm_mean(data2$maxSpeedup), max(data2$maxSpeedup))
overalSpeedups
maxSpeedups
meanSpeedups
minSpeedups
data[order(-data$FLOPS),]
data[order(-data$FLOPS),]
data = read.table("result.csv", header = T, sep = ',')
GFLOPSperCore = 1209/36
data$FLOPS =  200* data$m * data$n * data$k / (data$time * 1e6) / (GFLOPSperCore * data$p)
data$case = paste(data$case,data$m == data$k,sep ="_")
data[order(-data$FLOPS),]
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
data = read.table("result.csv", header = T, sep = ',')
GFLOPSperCore = 1209/36
data$FLOPS =  200* data$m * data$n * data$k / (data$time * 1e6) / (GFLOPSperCore * data$p)
data$case = paste(data$case,data$m == data$k,sep ="_")
#data = data[data$case != "memory_p2_FALSE",]
#data = data[data$case != "strong_TRUE",]
data[data$case == "memory_p1_FALSE",]$case = "m<k, lim. memory"
data[data$case == "memory_p1_TRUE",]$case = "m=k, lim. memory"
data[data$case == "memory_p2_TRUE",]$case = "m=k, extra memory"
data[data$case == "strong_FALSE",]$case = "m<k, strong scaling"
data[data$case == "memory_p2_FALSE",]$case = "m<k, extra memory"
data[data$case == "strong_TRUE",]$case = "m=k, strong scaling"
data[order(-data$FLOPS),]
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_generic.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/proper_script.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
source('C:/gk_pliki/uczelnia/doktorat/performance_modelling/repo/papers/MMM-paper/results/parse_mainpaper.R', echo=TRUE)
